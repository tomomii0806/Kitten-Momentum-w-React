{"version":3,"sources":["Contacts.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","contacts","map","id","src","url","onClick","window","location","reload","Clock","prop","state","time","Date","toLocaleString","className","this","Component","App","props","fetch","then","results","json","data","setState","catch","console","log","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAyBeA,G,YAlBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,6BACE,gCACE,8CAEDA,EAASC,KAAI,SAACD,GAAD,OACV,gCACE,yBAAKE,GAAK,aACR,yBAAKC,IAAOH,EAASI,WAI7B,4BAAQC,QAAS,kBAAMC,OAAOC,SAASC,QAAO,KAA9C,uBCASC,E,YAfX,WAAYC,GAAM,IAAD,8BACb,4CAAMA,KACDC,MAAQ,CACTC,MAAM,IAAIC,MAAOC,kBAHR,E,sEAQb,OACI,uBAAGC,UAAU,SAAb,eACiBC,KAAKL,MAAMC,U,GAXpBK,aCkCLC,IAhCJ,IAAIL,MAAOC,iB,YAGpB,WAAYK,GAAQ,IAAD,8BACjB,4CAAMA,KACCR,MAAQ,CACXX,SAAU,IAHG,E,sEAOjB,OACE,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUA,SAAUgB,KAAKL,MAAMX,c,0CAQpB,IAAD,OAElBoB,MAAM,8CACLC,MAAK,SAAAC,GAAY,OAAOA,EAAQC,UAChCF,MAAK,SAACG,GAAW,EAAKC,SAAS,CAAEzB,SAAUwB,OAE3CE,MAAMC,QAAQC,S,GAzBCX,cCIEY,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.49683f6f.chunk.js","sourcesContent":["import React from \"react\";\nimport './Contacts.css';\n\n/*function Contact(props) {\n  return <div>This is a contact</div>;\n}*/\n\nconst Contacts = ({ contacts }) => {\n  return (\n    <div>\n      <center>\n        <h1>Today's Kitty</h1>\n      </center>\n      {contacts.map((contacts) => (\n          <center>\n            <div id = \"kitty-img\">\n              <img src = {contacts.url}/>\n            </div>              \n          </center>\n      ))}\n      <button onClick={() => window.location.reload(false)}>Click to reload!</button>      \n    </div>\n  )\n};\n\nexport default Contacts;","import React, { Component } from 'react';\n\n//let time = new Date().toLocaleString();\n\nclass Clock extends Component {\n    constructor(prop){\n        super(prop);\n        this.state = {\n            time: new Date().toLocaleString()\n        }\n    }\n\n    render() {\n        return (\n            <p className=\"clock\">\n                The time is {this.state.time}\n            </p>\n        );\n    }\n}\nexport default Clock;\n","//import React from 'react';\nimport './App.css';\nimport Contacts from \"./Contacts\";\nimport Clock from \"./Clock\";\nimport React, { Component } from 'react';\n\nlet time = new Date().toLocaleString();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        contacts: [],\n    };\n  }\n  render(){\n    return(    \n      <div>\n          <Clock></Clock>\n          <Contacts contacts={this.state.contacts} />\n      </div>\n        \n    )\n  }\n    \n    \n\ncomponentDidMount() {\n\n  fetch('https://api.thecatapi.com/v1/images/search')\n  .then(results => {return results.json(); })\n  .then((data) => { this.setState({ contacts: data })\n  })\n  .catch(console.log)\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}